// <auto-generated />
using System;
using ExpenseTracking.Api.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExpenseTracking.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250506225645_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Expense", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertedUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("PaymentMethodId")
                        .HasColumnType("bigint");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertedUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<long?>("ManagerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("DepartmentId", "IsDefault")
                        .IsUnique()
                        .HasFilter("DepartmentId IS NOT NULL AND IsDefault = 1");

                    b.HasIndex("EmployeeId", "IsDefault")
                        .IsUnique()
                        .HasFilter("EmployeeId IS NOT NULL AND IsDefault = 1");

                    b.ToTable("Addresses", t =>
                        {
                            t.HasCheckConstraint("CK_Address_EmployeeOrDepartment", "((EmployeeId IS NOT NULL AND DepartmentId IS NULL) OR (EmployeeId IS NULL AND DepartmentId IS NOT NULL))");
                        });
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ChangedValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityId")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("EntityName")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("OriginalValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertedUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<long?>("ManagerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Human Resources",
                            InsertedDate = new DateTime(2025, 5, 7, 1, 56, 44, 456, DateTimeKind.Local).AddTicks(3926),
                            InsertedUser = "system",
                            IsActive = true,
                            Name = "HR"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Information Technology",
                            InsertedDate = new DateTime(2025, 5, 7, 1, 56, 44, 456, DateTimeKind.Local).AddTicks(3928),
                            InsertedUser = "system",
                            IsActive = true,
                            Name = "IT"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Finance Department",
                            InsertedDate = new DateTime(2025, 5, 7, 1, 56, 44, 456, DateTimeKind.Local).AddTicks(3929),
                            InsertedUser = "system",
                            IsActive = true,
                            Name = "Finance"
                        });
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.ExpenseCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertedUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ExpenseCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            InsertedDate = new DateTime(2025, 5, 7, 1, 56, 44, 456, DateTimeKind.Local).AddTicks(4016),
                            InsertedUser = "system",
                            IsActive = true,
                            Name = "Travel"
                        },
                        new
                        {
                            Id = 2L,
                            InsertedDate = new DateTime(2025, 5, 7, 1, 56, 44, 456, DateTimeKind.Local).AddTicks(4017),
                            InsertedUser = "system",
                            IsActive = true,
                            Name = "Food"
                        },
                        new
                        {
                            Id = 3L,
                            InsertedDate = new DateTime(2025, 5, 7, 1, 56, 44, 456, DateTimeKind.Local).AddTicks(4018),
                            InsertedUser = "system",
                            IsActive = true,
                            Name = "Office Supplies"
                        });
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.ExpenseFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ExpenseId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertedUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.ToTable("ExpenseFiles");
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ExpenseId")
                        .HasColumnType("bigint");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("nvarchar(26)");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertedUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Message")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Success")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ExpenseId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertedUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            InsertedDate = new DateTime(2025, 5, 7, 1, 56, 44, 456, DateTimeKind.Local).AddTicks(3990),
                            InsertedUser = "system",
                            IsActive = true,
                            Name = "Credit Card"
                        },
                        new
                        {
                            Id = 2L,
                            InsertedDate = new DateTime(2025, 5, 7, 1, 56, 44, 456, DateTimeKind.Local).AddTicks(3991),
                            InsertedUser = "system",
                            IsActive = true,
                            Name = "Bank Transfer"
                        },
                        new
                        {
                            Id = 3L,
                            InsertedDate = new DateTime(2025, 5, 7, 1, 56, 44, 456, DateTimeKind.Local).AddTicks(3993),
                            InsertedUser = "system",
                            IsActive = true,
                            Name = "Cash"
                        });
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.Phone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertedUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("DepartmentId", "IsDefault")
                        .IsUnique()
                        .HasFilter("DepartmentId IS NOT NULL AND IsDefault = 1");

                    b.HasIndex("UserId", "IsDefault")
                        .IsUnique()
                        .HasFilter("UserId IS NOT NULL AND IsDefault = 1");

                    b.ToTable("Phones", t =>
                        {
                            t.HasCheckConstraint("CK_Phone_UserOrDepartment", "((UserId IS NOT NULL AND DepartmentId IS NULL) OR (UserId IS NULL AND DepartmentId IS NOT NULL))");
                        });
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertedUser")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", null, t =>
                        {
                            t.HasCheckConstraint("CK_User_RoleCheck", "Role IN ('Employee', 'Manager')");
                        });

                    b.UseTptMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Email = "admin@example.com",
                            InsertedDate = new DateTime(2025, 5, 7, 1, 56, 44, 456, DateTimeKind.Local).AddTicks(3664),
                            InsertedUser = "system",
                            IsActive = false,
                            OpenDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "9E3CB93E91ACB73F8E58BB85958B24F2272E9AE5C3D1452BDA8D3363AE8E2735",
                            Role = "Manager",
                            Secret = "XCjYRf8lc1oZTnCJ50lVoULzVpOJEZ",
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2L,
                            Email = "admin2@example.com",
                            InsertedDate = new DateTime(2025, 5, 7, 1, 56, 44, 456, DateTimeKind.Local).AddTicks(3704),
                            InsertedUser = "system",
                            IsActive = false,
                            OpenDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "51C0DA57AB3532FF89CFB58EDDA130B5FC4D825CC9DB78F7813DC78182255BDE",
                            Role = "Manager",
                            Secret = "vrqzV1DLbri6LTB58PZ7mY2xwUl04f",
                            UserName = "admin2"
                        },
                        new
                        {
                            Id = 3L,
                            Email = "employee1@example.com",
                            InsertedDate = new DateTime(2025, 5, 7, 1, 56, 44, 456, DateTimeKind.Local).AddTicks(3727),
                            InsertedUser = "system",
                            IsActive = false,
                            OpenDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "F6FE22F8BA0D7CECECA82CA88C22EEA094360CE19BBEC4A75BF0C07F545B5A0E",
                            Role = "Employee",
                            Secret = "1hEhfeUKk87MUa4o9T98I7FVTEigFg",
                            UserName = "employee1"
                        },
                        new
                        {
                            Id = 4L,
                            Email = "employee2@example.com",
                            InsertedDate = new DateTime(2025, 5, 7, 1, 56, 44, 456, DateTimeKind.Local).AddTicks(3763),
                            InsertedUser = "system",
                            IsActive = false,
                            OpenDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "700CDD4B58551125D08B13C1075F57BF74CE9487030A4717DDDAE2C96B1BA274",
                            Role = "Employee",
                            Secret = "CV4kOHsUAUrrpOIsNGGnpZG3052MJH",
                            UserName = "employee2"
                        });
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.Employee", b =>
                {
                    b.HasBaseType("ExpenseTracking.Api.Domain.User");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<long>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ExitDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("nvarchar(26)");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employees", null, t =>
                        {
                            t.HasCheckConstraint("CK_User_RoleCheck", "Role IN ('Employee', 'Manager')");
                        });
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.Manager", b =>
                {
                    b.HasBaseType("ExpenseTracking.Api.Domain.User");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.ToTable("Managers", null, t =>
                        {
                            t.HasCheckConstraint("CK_User_RoleCheck", "Role IN ('Employee', 'Manager')");
                        });
                });

            modelBuilder.Entity("Expense", b =>
                {
                    b.HasOne("ExpenseTracking.Api.Domain.ExpenseCategory", "Category")
                        .WithMany("Expenses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpenseTracking.Api.Domain.Employee", "Employee")
                        .WithMany("Expenses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExpenseTracking.Api.Domain.PaymentMethod", "PaymentMethod")
                        .WithMany("Expenses")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Employee");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.Address", b =>
                {
                    b.HasOne("ExpenseTracking.Api.Domain.Department", "Department")
                        .WithMany("Addresses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("ExpenseTracking.Api.Domain.Employee", "Employee")
                        .WithMany("Addresses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ExpenseTracking.Api.Domain.Manager", null)
                        .WithMany("Addresses")
                        .HasForeignKey("ManagerId");

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.Department", b =>
                {
                    b.HasOne("ExpenseTracking.Api.Domain.Employee", "Manager")
                        .WithMany("ManagedDepartments")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.ExpenseFile", b =>
                {
                    b.HasOne("Expense", "Expense")
                        .WithMany("File")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expense");
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.Payment", b =>
                {
                    b.HasOne("ExpenseTracking.Api.Domain.Employee", "Employee")
                        .WithMany("Payments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Expense", "Expense")
                        .WithMany("Payments")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Expense");
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.Phone", b =>
                {
                    b.HasOne("ExpenseTracking.Api.Domain.Department", "Department")
                        .WithMany("Phones")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("ExpenseTracking.Api.Domain.User", "User")
                        .WithMany("Phones")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.Employee", b =>
                {
                    b.HasOne("ExpenseTracking.Api.Domain.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExpenseTracking.Api.Domain.User", null)
                        .WithOne()
                        .HasForeignKey("ExpenseTracking.Api.Domain.Employee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.Manager", b =>
                {
                    b.HasOne("ExpenseTracking.Api.Domain.User", null)
                        .WithOne()
                        .HasForeignKey("ExpenseTracking.Api.Domain.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Expense", b =>
                {
                    b.Navigation("File");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.Department", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Employees");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.ExpenseCategory", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.PaymentMethod", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.User", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.Employee", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Expenses");

                    b.Navigation("ManagedDepartments");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ExpenseTracking.Api.Domain.Manager", b =>
                {
                    b.Navigation("Addresses");
                });
#pragma warning restore 612, 618
        }
    }
}
